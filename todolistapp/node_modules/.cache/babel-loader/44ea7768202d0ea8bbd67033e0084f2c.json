{"ast":null,"code":"//donot deal with ui - function to deal with actions\n// to control and manage state\n//action to perform \n//to define hooks\nconst Reducer = (state, action) => {\n  switch (action.type) {\n    case 'CREATE':\n      //manipulate the object of the state \n      return { //not changing directly, but changing using an array to replace it\n        //... - spread operator\n        //keeping original array elements along\n        // with new trans object (which is found in action.payload)\n        //payload from caller\n        //replacing trans with new array\n        ...state,\n        trans: [...state.trans, action.payload]\n      };\n\n    case 'UPDATE':\n      {\n        return { //replacing trans with action.payload\n          //action.payload is temp\n          //replacing state(trans) with temp\n          ...state,\n          trans: [...action.payload]\n        };\n      }\n\n    case 'DELETE':\n      {\n        return { ...state,\n          trans: state.trans.filter(tran => tran.id !== action.payload)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\n_c = Reducer;\nexport default Reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reducer\");","map":{"version":3,"sources":["/Users/anaghasethuraman/Desktop/CMPE 273/MERN Stack/todolistapp/src/components/Reducer.js"],"names":["Reducer","state","action","type","trans","payload","filter","tran","id"],"mappings":"AAAA;AAEA;AACA;AAEA;AACA,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,QAAL;AACI;AACA,aAAM,EACF;AACA;AACA;AACA;AACA;AAEA;AACA,WAAGF,KARD;AAQOG,QAAAA,KAAK,EAAG,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAgBF,MAAM,CAACG,OAAvB;AARf,OAAN;;AAUH,SAAK,QAAL;AAAc;AACV,eAAM,EACF;AACA;AACA;AACA,aAAGJ,KAJD;AAIOG,UAAAA,KAAK,EAAE,CAAC,GAAGF,MAAM,CAACG,OAAX;AAJd,SAAN;AAMH;;AACD,SAAK,QAAL;AAAc;AACV,eAAM,EAEF,GAAGJ,KAFD;AAEOG,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYE,MAAZ,CAAoBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAWN,MAAM,CAACG,OAA9C;AAFd,SAAN;AAIH;;AACD;AACI,aAAOJ,KAAP;AA5BT;AA+BF,CAhCD;;KAAMD,O;AAkCN,eAAeA,OAAf","sourcesContent":["//donot deal with ui - function to deal with actions\n\n// to control and manage state\n//action to perform \n\n//to define hooks\nconst Reducer = (state,action) => {\n   switch(action.type){\n       case 'CREATE':\n           //manipulate the object of the state \n           return{\n               //not changing directly, but changing using an array to replace it\n               //... - spread operator\n               //keeping original array elements along\n               // with new trans object (which is found in action.payload)\n               //payload from caller\n\n               //replacing trans with new array\n               ...state,trans : [...state.trans,action.payload]\n           }\n        case 'UPDATE':{\n            return{\n                //replacing trans with action.payload\n                //action.payload is temp\n                //replacing state(trans) with temp\n                ...state,trans :[...action.payload]\n            }\n        }\n        case 'DELETE':{\n            return{\n                \n                ...state,trans :state.trans.filter( tran => tran.id !==action.payload )\n            }\n        }\n        default :\n            return state;   \n   }\n    \n}\n\nexport default Reducer\n"]},"metadata":{},"sourceType":"module"}