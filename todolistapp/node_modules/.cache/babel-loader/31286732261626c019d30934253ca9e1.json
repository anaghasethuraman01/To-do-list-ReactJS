{"ast":null,"code":"var _jsxFileName = \"/Users/anaghasethuraman/Desktop/CMPE 273/MERN Stack/todolistapp/src/components/GlobalStore.js\",\n    _s = $RefreshSig$();\n\n//keep and manage state - to share data among sibling\nimport React, { createContext, useReducer } from 'react';\nimport Reducer from './Reducer';\nimport { reactLocalStorage } from 'reactjs-localstorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nreactLocalStorage.getObject('REACTPROJ4'); //define structure - structure is an object with one key-value pair\n\nconst initialState = {\n  trans: []\n}; //export  : to make it available for the components who want to use it\n//createContext - creating initial state\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); //whoever refer this later using useContext \n//they can access data and function\n//All children can use global context -whatever in value ={} is available to children\n//export in fn level\n\nexport const GlobalStore = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(Reducer, initialState); //to save state on submit\n\n  const createTask = tran => {\n    console.log('in create ', tran); //insert into state object\n\n    dispatch({\n      //dispatch() - fn that accept an object\n      //object has two fields - type(action) ,payload\n      type: 'CREATE',\n      payload: tran //this dispatch invoke Reducer and  check action type and replace trans property\n      //in Reducer - new task object will be inserted to array and task get added \n\n    });\n  }; //to update status of task\n\n\n  const updateTask = id => {\n    //all objects grabbed and input into temp\n    const temp = [...state.trans]; //copying into temp\n    //get index if id matches\n\n    const i = temp.findIndex(tran => tran.id === id); //checking status\n\n    const status = temp[i].done; //update status, if false then set it to true and vise versa\n\n    temp[i].done = status ? false : true;\n    dispatch({\n      type: 'UPDATE',\n      payload: temp //these are sent to Reducer\n\n    });\n  }; //to delete task based on id\n\n\n  const deleteTask = id => {\n    //using filter \n    dispatch({\n      type: 'DELETE',\n      payload: id\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    //children need task objects rather than states\n    //state.trans -have array of objects\n    //GlobalContext.Provider - Declaration\n    _jsxDEV(GlobalContext.Provider, {\n      value: {\n        trans: state.trans,\n        createTask,\n        updateTask,\n        deleteTask\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(GlobalStore, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalStore;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStore\");","map":{"version":3,"sources":["/Users/anaghasethuraman/Desktop/CMPE 273/MERN Stack/todolistapp/src/components/GlobalStore.js"],"names":["React","createContext","useReducer","Reducer","reactLocalStorage","getObject","initialState","trans","GlobalContext","GlobalStore","children","state","dispatch","createTask","tran","console","log","type","payload","updateTask","id","temp","i","findIndex","status","done","deleteTask"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAeC,aAAf,EAA6BC,UAA7B,QAA+C,OAA/C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;;AAEAA,iBAAiB,CAACC,SAAlB,CAA4B,YAA5B,E,CACA;;AACA,MAAMC,YAAY,GAAE;AAChBC,EAAAA,KAAK,EAAC;AADU,CAApB,C,CAGA;AACA;;AACA,OAAO,MAAMC,aAAa,gBAAGP,aAAa,CAACK,YAAD,CAAnC,C,CACN;AACD;AACA;AACA;;AACA,OAAO,MAAMG,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAEvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACC,OAAD,EAAUG,YAAV,CAApC,CAFuC,CAGvC;;AACA,QAAMO,UAAU,GAAEC,IAAD,IAAQ;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBF,IAAzB,EADqB,CAErB;;AACAF,IAAAA,QAAQ,CAAC;AACL;AACA;AACAK,MAAAA,IAAI,EAAG,QAHF;AAILC,MAAAA,OAAO,EAAGJ,IAJL,CAKL;AACA;;AANK,KAAD,CAAR;AAQH,GAXD,CAJuC,CAgBvC;;;AACA,QAAMK,UAAU,GAAKC,EAAF,IAAS;AACxB;AACA,UAAMC,IAAI,GAAG,CAAC,GAAGV,KAAK,CAACJ,KAAV,CAAb,CAFwB,CAEM;AAC9B;;AACA,UAAMe,CAAC,GAAGD,IAAI,CAACE,SAAL,CAAeT,IAAI,IAAEA,IAAI,CAACM,EAAL,KAAYA,EAAjC,CAAV,CAJwB,CAKxB;;AACA,UAAMI,MAAM,GAAGH,IAAI,CAACC,CAAD,CAAJ,CAAQG,IAAvB,CANwB,CAOxB;;AACAJ,IAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQG,IAAR,GAAaD,MAAM,GAAC,KAAD,GAAO,IAA1B;AACAZ,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAG,QADF;AAELC,MAAAA,OAAO,EAAGG,IAFL,CAGL;;AAHK,KAAD,CAAR;AAKH,GAdD,CAjBuC,CAgCvC;;;AACA,QAAMK,UAAU,GAAEN,EAAD,IAAM;AACnB;AACAR,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAC,QADA;AAELC,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GAND;;AAOA;AAAA;AACI;AACA;AACA;AACA,YAAC,aAAD,CAAe,QAAf;AAAwB,MAAA,KAAK,EAAG;AAACb,QAAAA,KAAK,EAAGI,KAAK,CAACJ,KAAf;AAAqBM,QAAAA,UAArB;AAAiCM,QAAAA,UAAjC;AAA4CO,QAAAA;AAA5C,OAAhC;AAAA,gBAGKhB;AAHL;AAAA;AAAA;AAAA;AAAA;AAJJ;AAUH,CAlDM;;GAAMD,W;;KAAAA,W","sourcesContent":["//keep and manage state - to share data among sibling\n\nimport React,{ createContext,useReducer } from 'react';\nimport Reducer from './Reducer';\nimport {reactLocalStorage} from 'reactjs-localstorage';\n\nreactLocalStorage.getObject('REACTPROJ4');\n//define structure - structure is an object with one key-value pair\nconst initialState ={\n    trans:[]\n}\n//export  : to make it available for the components who want to use it\n//createContext - creating initial state\nexport const GlobalContext = createContext(initialState);\n //whoever refer this later using useContext \n//they can access data and function\n//All children can use global context -whatever in value ={} is available to children\n//export in fn level\nexport const GlobalStore = ({children}) => {\n\n    const [state, dispatch] = useReducer(Reducer, initialState)\n    //to save state on submit\n    const createTask=(tran)=>{\n        console.log('in create ',tran);\n        //insert into state object\n        dispatch({\n            //dispatch() - fn that accept an object\n            //object has two fields - type(action) ,payload\n            type : 'CREATE',\n            payload : tran\n            //this dispatch invoke Reducer and  check action type and replace trans property\n            //in Reducer - new task object will be inserted to array and task get added \n        })\n    }\n    //to update status of task\n    const updateTask = ( id ) =>{\n        //all objects grabbed and input into temp\n        const temp = [...state.trans];//copying into temp\n        //get index if id matches\n        const i = temp.findIndex(tran=>tran.id === id)\n        //checking status\n        const status = temp[i].done;\n        //update status, if false then set it to true and vise versa\n        temp[i].done=status?false:true;\n        dispatch({\n            type : 'UPDATE',\n            payload : temp\n            //these are sent to Reducer\n        })\n    }\n    //to delete task based on id\n    const deleteTask=(id)=>{\n        //using filter \n        dispatch({\n            type:'DELETE',\n            payload :id\n        })\n    }\n    return (\n        //children need task objects rather than states\n        //state.trans -have array of objects\n        //GlobalContext.Provider - Declaration\n        <GlobalContext.Provider value={ {trans : state.trans,createTask ,updateTask,deleteTask} }>\n            {/* //createTask is a call back function in a more controlled  manner\n            and whatever given in value will be available to children*/}\n            {children}\n        </GlobalContext.Provider>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}